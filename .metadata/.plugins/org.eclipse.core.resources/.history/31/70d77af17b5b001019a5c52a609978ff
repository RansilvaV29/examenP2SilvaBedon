package espe.edu.ec.sensor_reading.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import espe.edu.ec.sensor_reading.dto.NewSensorReadingEvent;
import espe.edu.ec.sensor_reading.dto.SensorReadingDto;
import espe.edu.ec.sensor_reading.entity.SensorReading;
import espe.edu.ec.sensor_reading.publisher.SensorReadingEventPublisher;
import espe.edu.ec.sensor_reading.repository.SensorReadingRepository;

@Service
public class SensorReadingService {

    @Autowired
    private SensorReadingRepository repository;

    @Autowired
    private SensorReadingEventPublisher eventPublisher;

    public SensorReading saveReading(SensorReadingDto dto) {
        validateReading(dto);

        SensorReading reading = new SensorReading();
        reading.setSensorId(dto.getSensorId());
        reading.setType(dto.getType());
        reading.setValue(dto.getValue());
        reading.setTimestamp(dto.getTimestamp());

        SensorReading saved = repository.save(reading);

        // Crear y publicar evento para RabbitMQ
        NewSensorReadingEvent event = new NewSensorReadingEvent(
                saved.getSensorId(),
                saved.getType(),
                saved.getValue(),
                saved.getTimestamp());

        eventPublisher.publish(event);

        return saved;
    }

    public List<SensorReading> getAllReadings() {
        return repository.findAll();
    }

    public Optional<SensorReading> getReadingById(Long id) {
        return repository.findById(id);
    }

    private void validateReading(SensorReadingDto dto) {
        String type = dto.getType().toLowerCase();
        double value = dto.getValue();

        switch (type) {
            case "temperature":
                if (value < -40 || value > 60)
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                            "Temperatura fuera de rango (-40 a 60Â°C)");
                break;
            case "humidity":
                if (value < 0 || value > 100)
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Humedad fuera de rango (0 a 100%)");
                break;
            default:
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Tipo de sensor no soportado: " + type);
        }
    }
}